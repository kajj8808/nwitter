{"version":3,"sources":["fbase.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/AuthForm.js","components/AuthSocial.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","NweetContainer","styled","div","AttachmentBox","img","NweetBox","EditBtns","TextSpan","span","Profile","Header","Description","Main","CreatorUser","h2","LightlyText","h4","EditBtn","button","EditSpan","EditForm","form","UpdateBtn","input","CloseBtn","EditInput","NweetEditBtn","Nweet","nweetObj","isOwer","useState","editing","setEditing","text","newNweet","setNewNweet","editToggle","setEditToggle","toggleEditing","prev","onDeleteClick","a","window","confirm","doc","id","delete","attchmentUrl","refFromURL","onSubmit","event","update","onChange","value","target","required","attachmentUrl","src","type","onClick","creatorName","creatorId","createdAt","nowTime","Date","createdTime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","getTime","createAt","icon","faEllipsisH","faTrash","faPencilAlt","FormContainer","NweetSubmitBtn","Factory","ImagePreview","FactoryFooter","PreviewContainer","ImageCloseBtn","AttachLabel","label","ImageInput","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","preventDefault","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","now","displayName","collection","add","placeholder","maxLength","faTimes","color","htmlFor","faPlus","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","Boolean","readAsDataURL","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","documnet","data","InputBox","props","inputType","ToggleBtn","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","SocialBtn","SocialContainer","Social","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","faGoogle","faGithub","AuthContainer","Auth","faTwitter","size","style","marginBottom","AuthSocial","ProfileContainer","Radius","ChangeNameInput","ChangeNameForm","Line","hr","LogoutBtn","refreshUser","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","NavList","ul","ProfileLink","Link","Navigation","to","faUser","RouteContainer","AppRouter","isLoggedIn","exact","path","globalStyles","createGlobalStyle","reset","App","init","setInit","userObject","setUserObject","onAuthStateChanged","user","split","args","GlobalStyles","currentUser","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.863bfe68.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { dbService, storageService } from 'fbase';\r\nimport { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { Link } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nimport {\r\n  faTrash,\r\n  faPencilAlt,\r\n  faEllipsisH,\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst fontSize = 18;\r\n\r\nconst NweetContainer = styled.div`\r\n  display: flex;\r\n  padding: 12px;\r\n  border: 1px solid #333333;\r\n  gap: 13px;\r\n  border-top: 0px;\r\n`;\r\n\r\nconst AttachmentBox = styled.img`\r\n  width: 505px;\r\n  height: 285px;\r\n  border-radius: 13px;\r\n  object-fit: cover;\r\n  object-position: center top;\r\n  margin-top: 10px;\r\n`;\r\n\r\nconst NweetBox = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n`;\r\n\r\nconst EditBtns = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: absolute;\r\n  gap: 5px;\r\n  right: 0;\r\n  top: 0px;\r\n  background-color: black;\r\n  box-shadow: white 0px 1px 3px 1px;\r\n  border-radius: 8px;\r\n  z-index: 2;\r\n`;\r\n\r\nconst TextSpan = styled.span`\r\n  white-space: normal;\r\n  word-break: break-all;\r\n  font-size: ${fontSize}px;\r\n`;\r\n\r\nconst Profile = styled.div`\r\n  width: 56px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  background-color: #ff7979;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  width: 505px;\r\n  position: relative;\r\n`;\r\n\r\nconst Description = styled.div`\r\n  /* overflow 를 ... 으로 하기위해. */\r\n  width: 430px;\r\n  display: flex;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  position: relative;\r\n  width: 505px;\r\n`;\r\n\r\nconst CreatorUser = styled.h2`\r\n  font-weight: 600;\r\n`;\r\n\r\nconst LightlyText = styled.h4`\r\n  color: rgba(255, 255, 255, 0.5);\r\n`;\r\n\r\nconst EditBtn = styled.button`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  background-color: black;\r\n  border: none;\r\n  color: #ffff;\r\n  border-radius: 50%;\r\n  &:hover {\r\n    background-color: rgba(255, 121, 121, 0.1);\r\n    color: #fa7b79;\r\n  }\r\n`;\r\n\r\nconst EditSpan = styled.span`\r\n  text-align: center;\r\n  writing-mode: tb-rl;\r\n  font-size: 50px;\r\n  font-weight: 600;\r\n`;\r\n\r\nconst EditForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n`;\r\nconst UpdateBtn = styled.input`\r\n  background-color: #ff7979;\r\n  padding: 10px;\r\n  border-radius: 30px;\r\n  text-align: center;\r\n`;\r\n\r\nconst CloseBtn = styled.button`\r\n  background-color: #ff7979;\r\n  padding: 10px;\r\n  border: none;\r\n  color: #ffff;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst EditInput = styled.input`\r\n  border: 4px dotted #bcbcbc;\r\n  padding: 10px;\r\n`;\r\n\r\nconst NweetEditBtn = styled.button`\r\n  color: #ffff;\r\n  background-color: black;\r\n  border: none;\r\n  display: flex;\r\n  gap: 10px;\r\n  padding: 10px;\r\n  border-radius: 30px;\r\n`;\r\n\r\nconst Nweet = ({ nweetObj, isOwer }) => {\r\n  /* edit 하는 상태. 토글 관리. */\r\n  const [editing, setEditing] = useState(false);\r\n  /* 새로운 nweet(수정) obj.text 를 가져와서 기존 트윗이 보이도록 초기값. */\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n  const [editToggle, setEditToggle] = useState(false);\r\n\r\n  const toggleEditing = () => {\r\n    setEditing((prev) => !prev);\r\n    setEditToggle(false);\r\n  };\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm('삭제하시겠습니까?');\r\n    if (ok) {\r\n      /* docmnet id 값을 찾아서 삭제합니다. */\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      if (nweetObj.attchmentUrl !== '') {\r\n        await storageService.refFromURL(nweetObj.attchmentUrl).delete();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const { value } = event.target;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    //event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({ text: newNweet });\r\n  };\r\n\r\n  const onEditBtn = () => {\r\n    setEditToggle((prev) => !prev);\r\n  };\r\n\r\n  const getTime = (createdAt) => {\r\n    const nowTime = new Date();\r\n    const createdTime = new Date(createdAt);\r\n    let result = '';\r\n    // 만든날짜 계산\r\n    if (nowTime.getFullYear() !== createdTime.getFullYear()) {\r\n      //년\r\n      result = `${nowTime.getFullYear() - createdTime.getFullYear()}년`;\r\n    } else if (nowTime.getMonth() !== createdTime.getMonth()) {\r\n      //월\r\n      result = `${nowTime.getMonth() - createdTime.getMonth()}월`;\r\n    } else if (nowTime.getDay() !== createdTime.getDay()) {\r\n      //일\r\n      result = `${nowTime.getDay() - createdTime.getDay()}일`;\r\n    } else if (nowTime.getHours() !== createdTime.getHours()) {\r\n      //시\r\n      result = `${nowTime.getHours() - createdTime.getHours()}시`;\r\n    } else if (nowTime.getMinutes() !== createdTime.getMinutes()) {\r\n      //분\r\n      result = `${nowTime.getMinutes() - createdTime.getMinutes()}분`;\r\n    } else {\r\n      //초\r\n      result = `${nowTime.getSeconds() - createdTime.getSeconds()}초`;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div key={nweetObj.id}>\r\n      {editing ? (\r\n        <NweetContainer>\r\n          <EditSpan>EDIT</EditSpan>\r\n          <NweetBox>\r\n            <EditForm onSubmit={onSubmit}>\r\n              <EditInput onChange={onChange} value={newNweet} required />\r\n              {nweetObj.attachmentUrl && (\r\n                <AttachmentBox src={nweetObj.attachmentUrl}></AttachmentBox>\r\n              )}\r\n              <UpdateBtn type=\"submit\" value=\"Update Nweet\" />\r\n            </EditForm>\r\n            <CloseBtn onClick={toggleEditing}>Cancel</CloseBtn>\r\n          </NweetBox>\r\n        </NweetContainer>\r\n      ) : (\r\n        <>\r\n          <NweetContainer>\r\n            <Profile />\r\n            <NweetBox>\r\n              <Header>\r\n                <Description>\r\n                  <CreatorUser>{nweetObj.creatorName}</CreatorUser>\r\n                  <LightlyText>@{nweetObj.creatorId}</LightlyText>\r\n                  <LightlyText>·</LightlyText>\r\n                  <LightlyText>{getTime(nweetObj.createAt)}</LightlyText>\r\n                </Description>\r\n                {isOwer && (\r\n                  <EditBtn onClick={onEditBtn}>\r\n                    <FontAwesomeIcon icon={faEllipsisH} />\r\n                  </EditBtn>\r\n                )}\r\n              </Header>\r\n              <Main>\r\n                <TextSpan>{nweetObj.text}</TextSpan>\r\n                {isOwer && editToggle && (\r\n                  <EditBtns>\r\n                    <NweetEditBtn onClick={onDeleteClick}>\r\n                      <FontAwesomeIcon icon={faTrash} />\r\n                      <span>Delete Nweet</span>\r\n                    </NweetEditBtn>\r\n                    <NweetEditBtn onClick={toggleEditing}>\r\n                      <FontAwesomeIcon icon={faPencilAlt} />\r\n                      <span>Update Nweet</span>\r\n                    </NweetEditBtn>\r\n                  </EditBtns>\r\n                )}\r\n              </Main>\r\n              {nweetObj.attachmentUrl && (\r\n                <Link>\r\n                  <AttachmentBox src={nweetObj.attachmentUrl}></AttachmentBox>\r\n                </Link>\r\n              )}\r\n            </NweetBox>\r\n          </NweetContainer>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","//Home.js 가 상위.\r\nimport { useState } from 'react';\r\nimport { dbService, storageService } from 'fbase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst FormContainer = styled.form`\r\n  width: 505px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst NweetSubmitBtn = styled.input`\r\n  background-color: #ff7979;\r\n  padding: 10px;\r\n  border-radius: 30px;\r\n  &:hover {\r\n    background-color: rgba(255, 121, 121, 0.8);\r\n  }\r\n`;\r\n\r\nconst Profile = styled.div`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n  background-color: #ff7979;\r\n`;\r\n\r\nconst Factory = styled.div`\r\n  display: flex;\r\n  gap: 12px;\r\n  border: 1px solid #333333;\r\n  padding: 15px;\r\n\r\n`;\r\n\r\nconst ImagePreview = styled.img`\r\n  width: 505px;\r\n  height: 285px;\r\n  border-radius: 13px;\r\n  object-fit: cover;\r\n  object-position: center top;\r\n`;\r\n\r\nconst FactoryFooter = styled.div`\r\n  width: 505px;\r\n  margin-top: 10px;\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n`;\r\n\r\nconst PreviewContainer = styled.div`\r\n  margin-top: 40px;\r\n  position: relative;\r\n`;\r\n\r\nconst ImageCloseBtn = styled.button`\r\n  position: absolute;\r\n  left: 5px;\r\n  top: 5px;\r\n  border: none;\r\n  padding: 8px;\r\n  border-radius: 50%;\r\n  width: 30px;\r\n  height: 30px;\r\n  text-align: center;\r\n  background-color: rgba(0, 0, 0, 0.6);\r\n  &:hover {\r\n    background-color: rgba(0, 0, 0, 0.5);\r\n  }\r\n`;\r\n\r\nconst AttachLabel = styled.label`\r\n  display: flex;\r\n  gap: 3px;\r\n  color : #ff7979;\r\n`;\r\n\r\nconst ImageInput = styled.input`\r\n  width: 0;\r\n  height: 0;\r\n`;\r\n\r\nconst NweetFactory = ({ userObj }) => {\r\n  /* 게시글 */\r\n  const [nweet, setNweet] = useState('');\r\n  /* (첨부파일) image */\r\n  const [attachment, setAttachment] = useState('');\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (nweet === '') {\r\n      return;\r\n    }\r\n    let attachmentUrl = '';\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createAt: Date.now(),\r\n      // 만든 유저 id\r\n      creatorId: userObj.uid,\r\n      creatorName: userObj.displayName,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection('nweets').add(nweetObj);\r\n\r\n    setNweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    const { value } = event.target;\r\n    setNweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const { files } = event.target;\r\n    const theFile = files[0];\r\n    /* broser api? */\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const { result } = finishedEvent.currentTarget;\r\n      setAttachment(result);\r\n    };\r\n    if (Boolean(theFile)) {\r\n      reader.readAsDataURL(theFile);\r\n    }\r\n  };\r\n\r\n  /* 실시간 데이터 베이스 사용을위해 주석처리. */\r\n  /*  const getNweets = async () => {\r\n    const dbNweets = await dbService.collection('nweets').get();\r\n    dbNweets.forEach((documnet) => {\r\n      //update / delte 를위해 id 를 추가하는 부분. \r\n      const nweetObject = { ...documnet.data(), id: documnet.id };\r\n      setNweets((prev) => [nweetObject, ...prev]);\r\n    });\r\n  }; */\r\n  const onClaerAttachment = () => setAttachment('');\r\n  return (\r\n    <Factory>\r\n      <Profile></Profile>\r\n      <FormContainer onSubmit={onSubmit}>\r\n        <input\r\n          value={nweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        ></input>\r\n        {attachment && (\r\n          <PreviewContainer>\r\n            <ImagePreview src={attachment} />\r\n            <ImageCloseBtn onClick={onClaerAttachment}>\r\n              <FontAwesomeIcon icon={faTimes} color=\"white\" />\r\n            </ImageCloseBtn>\r\n          </PreviewContainer>\r\n        )}\r\n        <FactoryFooter>\r\n          <AttachLabel htmlFor=\"attach-file\">\r\n            <span>Add Photos</span>\r\n            <FontAwesomeIcon icon={faPlus} />\r\n          </AttachLabel>\r\n          <ImageInput\r\n            id=\"attach-file\"\r\n            type=\"file\"\r\n            accept=\"image/*\"\r\n            onChange={onFileChange}\r\n          />\r\n          <NweetSubmitBtn type=\"submit\" value=\"Nweet\" />\r\n        </FactoryFooter>\r\n      </FormContainer>\r\n    </Factory>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import { useState, useEffect } from 'react';\r\nimport { dbService } from 'fbase';\r\nimport Nweet from 'components/Nweet';\r\nimport NweetFactory from 'components/NweetFactory';\r\nimport styled from 'styled-components';\r\n\r\nconst NweetContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  color: #ffff;\r\n`;\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n  useEffect(() => {\r\n    /* 실시간 데이터베이스 */\r\n    dbService\r\n      .collection('nweets')\r\n      .orderBy('createAt', 'desc')\r\n      .onSnapshot((snapshot) => {\r\n        const newArray = snapshot.docs.map((documnet) => ({\r\n          id: documnet.id,\r\n          ...documnet.data(),\r\n        }));\r\n        setNweets(newArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <NweetContainer>\r\n      <NweetFactory userObj={userObj} />\r\n      <div>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwer={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </NweetContainer>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { authService } from 'fbase';\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FormContainer = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 350px;\r\n  gap: 10px;\r\n`;\r\n\r\nconst InputBox = styled.input`\r\n  background-color: ${(props) => (props.inputType ? '#ff7979' : 'white')};\r\n  border-radius: 30px;\r\n  color: ${(props) => (props.inputType ? '#ffff' : 'black')};\r\n  text-align: ${(props) => (props.inputType ? 'center' : '')};\r\n  &:hover {\r\n    background-color: ${(props) =>\r\n      props.inputType ? 'rgba(255,121,121,0.9)' : 'white'};\r\n  }\r\n  padding: 10px;\r\n`;\r\n\r\nconst ToggleBtn = styled.div`\r\n  text-align: center;\r\n  text-decoration: underline;\r\n`;\r\n\r\nconst AuthForm = () => {\r\n  /* 쓰는 state 들  */\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newAccount, setNewAccount] = useState(false);\r\n  const [error, setError] = useState('');\r\n\r\n  //input 입력을위해서.\r\n  const onChange = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  //authService 로 데이터전송.\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (newAccount) {\r\n        //create new Account\r\n        await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        //log in\r\n        await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  //로그인 / 만들기 를 바꿈.\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <div>\r\n      <FormContainer onSubmit={onSubmit}>\r\n        <InputBox\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Eamil\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <InputBox\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <InputBox\r\n          type=\"submit\"\r\n          value={newAccount ? 'Create Account' : 'Log In'}\r\n          inputType={'submit'}\r\n        />\r\n        <br />\r\n        {error}\r\n      </FormContainer>\r\n      <ToggleBtn onClick={toggleAccount}>\r\n        {newAccount ? 'Sign In' : 'Create Account'}\r\n      </ToggleBtn>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from 'fbase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faGoogle, faGithub } from '@fortawesome/free-brands-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst SocialBtn = styled.button`\r\n  background-color: white;\r\n  border: none;\r\n  border-radius: 30px;\r\n  padding: 12px;\r\n  &:hover{\r\n    background-color: rgba(255,255,255,0.9);\r\n  }\r\n`;\r\n\r\nconst SocialContainer = styled.div`\r\n  width: 350px;\r\n  margin-top: 30px;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  \r\n`;\r\n\r\nconst Social = () => {\r\n  const onSocialClick = async (event) => {\r\n    const { name } = event.target;\r\n    let provider;\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n  return (\r\n    <SocialContainer>\r\n      <SocialBtn onClick={onSocialClick} name=\"google\">\r\n        Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n      </SocialBtn>\r\n      <SocialBtn onClick={onSocialClick} name=\"github\">\r\n        Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n      </SocialBtn>\r\n    </SocialContainer>\r\n  );\r\n};\r\n\r\nexport default Social;\r\n","import AuthForm from 'components/AuthForm';\r\nimport AuthSocial from 'components/AuthSocial';\r\n//import styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst AuthContainer = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  display : flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  color: white;\r\n  margin-top: 50px;\r\n`;\r\n\r\nconst Auth = () => {\r\n  return (\r\n    <AuthContainer>\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#ff7979'}\r\n        size=\"3x\"\r\n        style={{ marginBottom: '20px' }}\r\n      />\r\n      <AuthForm />\r\n      <AuthSocial />\r\n    </AuthContainer>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { useState, useEffect } from 'react';\r\nimport { authService, dbService } from 'fbase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport styled from 'styled-components';\r\n\r\nconst ProfileContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 505px;\r\n`;\r\n\r\nconst Radius = styled.div`\r\n  width: 100%;\r\n  background-color: #ff7979;\r\n  padding: 10px;\r\n  border-radius: 30px;\r\n  text-align: center;\r\n  color: white;\r\n  &:hover {\r\n    background-color: rgba(255, 121, 121, 0.8);\r\n  }\r\n`;\r\n\r\nconst ChangeNameInput = styled.input`\r\n  width: 100%;\r\n  border: none;\r\n  background-color: #ffff;\r\n  border-radius: 30px;\r\n  padding: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\nconst ChangeNameForm = styled.form`\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nconst Line = styled.hr`\r\n  width: 100%;\r\n  background-color: black;\r\n  border-top: 1px solid #bbb;\r\n  border-bottom: 0px;\r\n  margin-bottom: 60px;\r\n`;\r\n\r\nconst LogoutBtn = styled.button`\r\n  background-color: transparent;\r\n  color: #ffff;\r\n  border: none;\r\n  font-size: 15px;\r\n`;\r\n\r\nconst Profile = ({ userObj, refreshUser }) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    /* home 으로 이동 history 는 push 방식으로 동작. */\r\n    history.push('/');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const { value } = event.target;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({ displayName: newDisplayName });\r\n      // update 를 한후 실시간으로 데이터를 받기위해 사용.!\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ProfileContainer>\r\n      <ChangeNameForm onSubmit={onSubmit}>\r\n        <ChangeNameInput\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n        />\r\n        <Radius>\r\n          <input type=\"submit\" value=\"Update Profile\" />\r\n        </Radius>\r\n      </ChangeNameForm>\r\n      <Line />\r\n      <Radius>\r\n        <LogoutBtn onClick={onLogOutClick}>Log Out</LogoutBtn>\r\n      </Radius>\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst NavList = styled.ul`\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-top: 50px;\r\n  gap: 20px;\r\n`;\r\n\r\nconst ProfileLink = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 12px;\r\n  gap: 10px;\r\n  color: #ffff;\r\n`\r\n\r\nconst Navigation = ({ userObj }) => {\r\n  return (\r\n    <nav>\r\n      <NavList>\r\n        <li>\r\n          <Link to=\"/\">\r\n            <FontAwesomeIcon icon={faTwitter} color={'#ff7979'} size=\"2x\" />\r\n          </Link>\r\n        </li>\r\n        <li>\r\n          <ProfileLink to=\"/profile\">\r\n            <FontAwesomeIcon icon={faUser} color={'#ff7979'} size=\"2x\" />\r\n            <span>\r\n              {userObj.displayName\r\n                ? `${userObj.displayName}의 Profile`\r\n                : 'Profile'}\r\n            </span>\r\n          </ProfileLink>\r\n        </li>\r\n      </NavList>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from 'routes/Home';\r\nimport Auth from 'routes/Auth';\r\nimport Profile from 'routes/Profile';\r\nimport Navigation from './Navigation';\r\nimport styled from 'styled-components';\r\n\r\nconst RouteContainer = styled.div`\r\n  max-width: 890px;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  margin-top: 80px;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      {/* Switch => Route 중 하나만 렌더링하게. */}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <RouteContainer>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </RouteContainer>\r\n        ) : (\r\n          <Route path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import {createGlobalStyle} from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    a{\r\n        text-decoration:none;\r\n    }\r\n    input{\r\n        all:unset;\r\n        box-sizing : border-box;\r\n        appearance : none;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n        background-color: #000000;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import AppRouter from 'components/Router';\nimport { useEffect, useState } from 'react';\nimport { authService } from 'fbase';\nimport GlobalStyles from 'components/GlobalStyles';\n\nfunction App() {\n  /* 로그인 되있는상태 이라면 홈페이지로 넘겨주기위해서 사용합니다.(자동로그인?) */\n  const [init, setInit] = useState(false);\n  /* loogin 햇는지를 알고 user 를얻기위해 사용합니다. */\n  const [userObject, setUserObject] = useState(null);\n  // user data를 새로고침 해서 실시간데이터를 받기위해 사용.\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObject({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObject({\n          uid: user.uid,\n          displayName: user.displayName ? user.displayName : user.email.split('@')[0],\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        //login 햇는지 안햇는지를 확인함.\n        setUserObject(false);\n      }\n      setInit(true);\n    });\n  }, []);\n  return (\n    <>\n      <GlobalStyles />\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObject)}\n          userObj={userObject}\n        />\n      ) : (\n        'initializing...'\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}