{"version":3,"sources":["fbase.js","components/Nweet.js","components/NweetFactory.js","routes/Home.js","components/AuthForm.js","components/AuthSocial.js","routes/Auth.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/GlobalStyles.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","NweetContainer","styled","div","AttachmentBox","img","Header","Nweet","nweetObj","isOwer","useState","editing","setEditing","text","newNweet","setNewNweet","toggleEditing","prev","onDeleteClick","a","window","confirm","doc","id","delete","attchmentUrl","refFromURL","onSubmit","event","update","onChange","value","target","required","type","onClick","createdAt","nowTime","Date","createdTime","getFullYear","getMonth","getDay","getHours","getMinutes","getSeconds","getTime","createAt","attachmentUrl","src","NweetFactory","userObj","nweet","setNweet","attachment","setAttachment","preventDefault","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","now","creatorId","collection","add","placeholder","maxLength","accept","theFile","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","width","height","Home","nweets","setNweets","useEffect","orderBy","onSnapshot","snapshot","newArray","docs","map","documnet","data","AuthForm","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","name","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","SocialContainer","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","Auth","AuthSocial","Profile","refreshUser","displayName","newDisplayName","setNewDisplayName","history","useHistory","updateProfile","signOut","push","Navigation","to","AppRouter","isLoggedIn","exact","path","globalStyles","createGlobalStyle","reset","App","init","setInit","userObject","setUserObject","onAuthStateChanged","user","args","GlobalStyles","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.21b2a7dc.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage'\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();","import { dbService, storageService } from 'fbase';\r\nimport { useState } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NweetContainer = styled.div`\r\n  padding: 15px;\r\n`;\r\n\r\nconst AttachmentBox = styled.img`\r\n  width: 505px;\r\n  height: 285px;\r\n/*   background-size: cover;\r\n  background-position: center top; */\r\n  border-radius: 13px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  width: 350px;\r\n  display: flex;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Nweet = ({ nweetObj, isOwer }) => {\r\n  /* edit 하는 상태. 토글 관리. */\r\n  const [editing, setEditing] = useState(false);\r\n  /* 새로운 nweet(수정) obj.text 를 가져와서 기존 트윗이 보이도록 초기값. */\r\n  const [newNweet, setNewNweet] = useState(nweetObj.text);\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm('삭제하시겠습니까?');\r\n    if (ok) {\r\n      /* docmnet id 값을 찾아서 삭제합니다. */\r\n      await dbService.doc(`nweets/${nweetObj.id}`).delete();\r\n      if (nweetObj.attchmentUrl !== '') {\r\n        await storageService.refFromURL(nweetObj.attchmentUrl).delete();\r\n      }\r\n    }\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const { value } = event.target;\r\n    setNewNweet(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    //event.preventDefault();\r\n    await dbService.doc(`nweets/${nweetObj.id}`).update({ text: newNweet });\r\n  };\r\n\r\n  const getTime = (createdAt) => {\r\n    const nowTime = new Date();\r\n    const createdTime = new Date(createdAt);\r\n    let result = '';\r\n    // 만든날짜 계산\r\n    if (nowTime.getFullYear() !== createdTime.getFullYear()) {\r\n      //년\r\n      result = `${nowTime.getFullYear() - createdTime.getFullYear()}년`;\r\n    } else if (nowTime.getMonth() !== createdTime.getMonth()) {\r\n      //월\r\n      result = `${nowTime.getMonth() - createdTime.getMonth()}월`;\r\n    } else if (nowTime.getDay() !== createdTime.getDay()) {\r\n      //일\r\n      result = `${nowTime.getDay() - createdTime.getDay()}일`;\r\n    } else if (nowTime.getHours() !== createdTime.getHours()) {\r\n      //시\r\n      result = `${nowTime.getHours() - createdTime.getHours()}시`;\r\n    } else if (nowTime.getMinutes() !== createdTime.getMinutes()) {\r\n      //분\r\n      result = `${nowTime.getMinutes() - createdTime.getMinutes()}분`;\r\n    } else {\r\n      //초\r\n      result = `${nowTime.getSeconds() - createdTime.getSeconds()}초`;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  return (\r\n    <div key={nweetObj.id}>\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit}>\r\n            <input onChange={onChange} value={newNweet} required />\r\n            <input type=\"submit\" value=\"Update Nweet\" />\r\n          </form>\r\n          <button onClick={toggleEditing}>Cancel</button>\r\n        </>\r\n      ) : (\r\n        <NweetContainer>\r\n          <Header>\r\n            <h4>{nweetObj.text}</h4>\r\n            <h5>· {getTime(nweetObj.createAt)}</h5>\r\n          </Header>\r\n\r\n          {nweetObj.attachmentUrl && (\r\n            <AttachmentBox src={nweetObj.attachmentUrl}></AttachmentBox>\r\n          )}\r\n          {isOwer && (\r\n            <>\r\n              <button onClick={onDeleteClick}>Delete Nweet</button>\r\n              <button onClick={toggleEditing}>Update Nweet</button>\r\n            </>\r\n          )}\r\n        </NweetContainer>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nweet;\r\n","//Home.js 가 상위.\r\nimport { useState } from 'react';\r\nimport { dbService , storageService } from 'fbase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst NweetFactory = ({userObj}) => {\r\n  /* 게시글 */\r\n  const [nweet, setNweet] = useState('');\r\n  /* (첨부파일) image */\r\n  const [attachment, setAttachment] = useState('');\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    let attachmentUrl = '';\r\n    if (attachment !== '') {\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n      attachmentUrl = await response.ref.getDownloadURL();\r\n    }\r\n\r\n    const nweetObj = {\r\n      text: nweet,\r\n      createAt: Date.now(),\r\n      // 만든 유저 id\r\n      creatorId: userObj.uid,\r\n      attachmentUrl,\r\n    };\r\n    await dbService.collection('nweets').add(nweetObj);\r\n\r\n    setNweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    event.preventDefault();\r\n    const { value } = event.target;\r\n    setNweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const { files } = event.target;\r\n    const theFile = files[0];\r\n    /* broser api? */\r\n    const reader = new FileReader();\r\n    reader.onloadend = (finishedEvent) => {\r\n      const { result } = finishedEvent.currentTarget;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(theFile);\r\n  };\r\n\r\n  /* 실시간 데이터 베이스 사용을위해 주석처리. */\r\n  /*  const getNweets = async () => {\r\n    const dbNweets = await dbService.collection('nweets').get();\r\n    dbNweets.forEach((documnet) => {\r\n      //update / delte 를위해 id 를 추가하는 부분. \r\n      const nweetObject = { ...documnet.data(), id: documnet.id };\r\n      setNweets((prev) => [nweetObject, ...prev]);\r\n    });\r\n  }; */\r\n  const onClaerAttachment = () => setAttachment('');\r\n\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <input\r\n        value={nweet}\r\n        onChange={onChange}\r\n        type=\"text\"\r\n        placeholder=\"What's on your mind?\"\r\n        maxLength={120}\r\n      ></input>\r\n      <input type=\"file\" accept=\"image/*\" onChange={onFileChange} />\r\n      <input type=\"submit\" value=\"Nweet\" />\r\n      {attachment && (\r\n        <div>\r\n          <img src={attachment} width=\"50px\" height=\"50px\" />\r\n          <button onClick={onClaerAttachment}>Clear</button>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NweetFactory;\r\n","import { useState, useEffect } from 'react';\r\nimport { dbService } from 'fbase';\r\nimport Nweet from 'components/Nweet';\r\nimport NweetFactory from 'components/NweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n  const [nweets, setNweets] = useState([]);\r\n  useEffect(() => {\r\n    /* 실시간 데이터베이스 */\r\n    dbService\r\n      .collection('nweets')\r\n      .orderBy('createAt', 'desc')\r\n      .onSnapshot((snapshot) => {\r\n        const newArray = snapshot.docs.map((documnet) => ({\r\n          id: documnet.id,\r\n          ...documnet.data(),\r\n        }));\r\n        setNweets(newArray);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <NweetFactory userObj={userObj} />\r\n      <div>\r\n        {nweets.map((nweet) => (\r\n          <Nweet\r\n            key={nweet.id}\r\n            nweetObj={nweet}\r\n            isOwer={nweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import { authService } from 'fbase';\r\nimport { useState } from 'react';\r\n\r\nconst AuthForm = () => {\r\n  /* 쓰는 state 들  */\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  //input 입력을위해서.\r\n  const onChange = (event) => {\r\n    const { name, value } = event.target;\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  //authService 로 데이터전송.\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      if (newAccount) {\r\n        //create new Account\r\n        await authService.createUserWithEmailAndPassword(email, password);\r\n      } else {\r\n        //log in\r\n        await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  //로그인 / 만들기 를 바꿈.\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Eamil\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <input type=\"submit\" value={newAccount ? 'Create Account' : 'Log In'} />\r\n        <br />\r\n        {error}\r\n      </form>\r\n      <span onClick={toggleAccount}>\r\n        {newAccount ? 'Sign In' : 'Create Account'}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","import { authService, firebaseInstance } from 'fbase';\r\n\r\nconst SocialContainer = () => {\r\n  const onSocialClick = async (event) => {\r\n    const { name } = event.target;\r\n    let provider;\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n  return (\r\n    <div>\r\n      <button onClick={onSocialClick} name=\"google\">\r\n        Continue with Google{' '}\r\n      </button>\r\n      <button onClick={onSocialClick} name=\"github\">\r\n        Continue with Github{' '}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SocialContainer;\r\n","import AuthForm from 'components/AuthForm';\r\nimport AuthSocial from 'components/AuthSocial';\r\n//import styled from 'styled-components';\r\n\r\nconst Auth = () => {\r\n  return (\r\n    <div>\r\n      <AuthForm />\r\n      <AuthSocial />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { useState, useEffect } from 'react';\r\nimport { authService, dbService } from 'fbase';\r\nimport { useHistory } from 'react-router-dom';\r\nimport Nweet from 'components/Nweet';\r\n\r\nconst Profile = ({ userObj , refreshUser}) => {\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const history = useHistory();\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    /* home 으로 이동 history 는 push 방식으로 동작. */\r\n    history.push('/');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const { value } = event.target;\r\n    setNewDisplayName(value);\r\n  };\r\n  \r\n  const onSubmit = async (event) =>{\r\n    event.preventDefault();\r\n    if(userObj.displayName !== newDisplayName){\r\n      await userObj.updateProfile({displayName : newDisplayName});\r\n      // update 를 한후 실시간으로 데이터를 받기위해 사용.!\r\n      refreshUser();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"Display name\"\r\n          value={newDisplayName}\r\n        />\r\n        <input type=\"submit\" value=\"Update Profile\" />\r\n      </form>\r\n      <button onClick={onLogOutClick}>Log Out</button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { Link } from 'react-router-dom';\r\n\r\nconst Navigation = ({userObj}) => {\r\n  return (\r\n    <nav>\r\n      <ul>\r\n        <li>\r\n          <Link to=\"/\">Home</Link>\r\n        </li>\r\n        <li>\r\n          <Link to=\"/profile\">{userObj.displayName}의 Profile</Link>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navigation;\r\n","import { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Home from 'routes/Home';\r\nimport Auth from 'routes/Auth';\r\nimport Profile from 'routes/Profile';\r\nimport Navigation from './Navigation';\r\n\r\nconst AppRouter = ({ isLoggedIn, userObj, refreshUser }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      {/* Switch => Route 중 하나만 렌더링하게. */}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </>\r\n        ) : (\r\n          <Route path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import {createGlobalStyle} from \"styled-components\";\r\nimport reset from \"styled-reset\";\r\n\r\nconst globalStyles = createGlobalStyle`\r\n    ${reset};\r\n    a{\r\n        text-decoration:none;\r\n    }\r\n    *{\r\n        box-sizing:border-box;\r\n    }\r\n    body{\r\n        font-family:-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\r\n    }\r\n`;\r\n\r\nexport default globalStyles;","import AppRouter from 'components/Router';\nimport { useEffect, useState } from 'react';\nimport { authService } from 'fbase';\nimport GlobalStyles from 'components/GlobalStyles';\n\nfunction App() {\n  /* 로그인 되있는상태 이라면 홈페이지로 넘겨주기위해서 사용합니다.(자동로그인?) */\n  const [init, setInit] = useState(false);\n  /* loogin 햇는지를 알고 user 를얻기위해 사용합니다. */\n  const [userObject, setUserObject] = useState(null);\n  // user data를 새로고침 해서 실시간데이터를 받기위해 사용.\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObject({\n      uid: user.uid,\n      displayName: user.displayName,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n  };\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        setUserObject({\n          uid: user.uid,\n          displayName: user.displayName,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n      } else {\n        //login 햇는지 안햇는지를 확인함.\n        setUserObject(false);\n      }\n      setInit(true);\n    });\n  }, []);\n  return (\n    <>\n      <GlobalStyles />\n      {init ? (\n        <AppRouter\n          refreshUser={refreshUser}\n          isLoggedIn={Boolean(userObject)}\n          userObj={userObject}\n        />\n      ) : (\n        'initializing...'\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}